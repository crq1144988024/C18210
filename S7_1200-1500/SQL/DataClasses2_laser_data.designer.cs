#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace C18210.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C18210")]
	public partial class DataClasses2_laser_dataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertTable_data_laser(Table_data_laser instance);
    partial void UpdateTable_data_laser(Table_data_laser instance);
    partial void DeleteTable_data_laser(Table_data_laser instance);
    #endregion
		
		public DataClasses2_laser_dataDataContext() : 
				base(global::C18210.Properties.Settings.Default.C18210ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2_laser_dataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2_laser_dataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2_laser_dataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2_laser_dataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Table_data_laser> Table_data_laser
		{
			get
			{
				return this.GetTable<Table_data_laser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table_data_laser")]
	public partial class Table_data_laser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _编号;
		
		private string _产品型号;
		
		private string _工件条码;
		
		private string _结果;
		
		private string _循环次数;
		
		private string _时间;
		
		private string _日期;
		
		private string _焊接时间;
		
		private string _绝对深度总值;
		
		private string _焊接相对深度;
		
		private string _相对深度总值;
		
		private string _触发压力;
		
		private string _焊接压力;
		
		private string _spare1;
		
		private string _spare2;
		
		private string _速度;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On编号Changing(int value);
    partial void On编号Changed();
    partial void On产品型号Changing(string value);
    partial void On产品型号Changed();
    partial void On工件条码Changing(string value);
    partial void On工件条码Changed();
    partial void On结果Changing(string value);
    partial void On结果Changed();
    partial void On循环次数Changing(string value);
    partial void On循环次数Changed();
    partial void On时间Changing(string value);
    partial void On时间Changed();
    partial void On日期Changing(string value);
    partial void On日期Changed();
    partial void On焊接时间Changing(string value);
    partial void On焊接时间Changed();
    partial void On绝对深度总值Changing(string value);
    partial void On绝对深度总值Changed();
    partial void On焊接相对深度Changing(string value);
    partial void On焊接相对深度Changed();
    partial void On相对深度总值Changing(string value);
    partial void On相对深度总值Changed();
    partial void On触发压力Changing(string value);
    partial void On触发压力Changed();
    partial void On焊接压力Changing(string value);
    partial void On焊接压力Changed();
    partial void Onspare1Changing(string value);
    partial void Onspare1Changed();
    partial void Onspare2Changing(string value);
    partial void Onspare2Changed();
    partial void On速度Changing(string value);
    partial void On速度Changed();
    #endregion
		
		public Table_data_laser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_编号", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 编号
		{
			get
			{
				return this._编号;
			}
			set
			{
				if ((this._编号 != value))
				{
					this.On编号Changing(value);
					this.SendPropertyChanging();
					this._编号 = value;
					this.SendPropertyChanged("编号");
					this.On编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_产品型号", DbType="NVarChar(50)")]
		public string 产品型号
		{
			get
			{
				return this._产品型号;
			}
			set
			{
				if ((this._产品型号 != value))
				{
					this.On产品型号Changing(value);
					this.SendPropertyChanging();
					this._产品型号 = value;
					this.SendPropertyChanged("产品型号");
					this.On产品型号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_工件条码", DbType="NVarChar(50)")]
		public string 工件条码
		{
			get
			{
				return this._工件条码;
			}
			set
			{
				if ((this._工件条码 != value))
				{
					this.On工件条码Changing(value);
					this.SendPropertyChanging();
					this._工件条码 = value;
					this.SendPropertyChanged("工件条码");
					this.On工件条码Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_结果", DbType="NVarChar(50)")]
		public string 结果
		{
			get
			{
				return this._结果;
			}
			set
			{
				if ((this._结果 != value))
				{
					this.On结果Changing(value);
					this.SendPropertyChanging();
					this._结果 = value;
					this.SendPropertyChanged("结果");
					this.On结果Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_循环次数", DbType="NVarChar(50)")]
		public string 循环次数
		{
			get
			{
				return this._循环次数;
			}
			set
			{
				if ((this._循环次数 != value))
				{
					this.On循环次数Changing(value);
					this.SendPropertyChanging();
					this._循环次数 = value;
					this.SendPropertyChanged("循环次数");
					this.On循环次数Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_时间", DbType="NVarChar(50)")]
		public string 时间
		{
			get
			{
				return this._时间;
			}
			set
			{
				if ((this._时间 != value))
				{
					this.On时间Changing(value);
					this.SendPropertyChanging();
					this._时间 = value;
					this.SendPropertyChanged("时间");
					this.On时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_日期", DbType="NVarChar(50)")]
		public string 日期
		{
			get
			{
				return this._日期;
			}
			set
			{
				if ((this._日期 != value))
				{
					this.On日期Changing(value);
					this.SendPropertyChanging();
					this._日期 = value;
					this.SendPropertyChanged("日期");
					this.On日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_焊接时间", DbType="NVarChar(50)")]
		public string 焊接时间
		{
			get
			{
				return this._焊接时间;
			}
			set
			{
				if ((this._焊接时间 != value))
				{
					this.On焊接时间Changing(value);
					this.SendPropertyChanging();
					this._焊接时间 = value;
					this.SendPropertyChanged("焊接时间");
					this.On焊接时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_绝对深度总值", DbType="NVarChar(50)")]
		public string 绝对深度总值
		{
			get
			{
				return this._绝对深度总值;
			}
			set
			{
				if ((this._绝对深度总值 != value))
				{
					this.On绝对深度总值Changing(value);
					this.SendPropertyChanging();
					this._绝对深度总值 = value;
					this.SendPropertyChanged("绝对深度总值");
					this.On绝对深度总值Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_焊接相对深度", DbType="NVarChar(50)")]
		public string 焊接相对深度
		{
			get
			{
				return this._焊接相对深度;
			}
			set
			{
				if ((this._焊接相对深度 != value))
				{
					this.On焊接相对深度Changing(value);
					this.SendPropertyChanging();
					this._焊接相对深度 = value;
					this.SendPropertyChanged("焊接相对深度");
					this.On焊接相对深度Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_相对深度总值", DbType="NVarChar(50)")]
		public string 相对深度总值
		{
			get
			{
				return this._相对深度总值;
			}
			set
			{
				if ((this._相对深度总值 != value))
				{
					this.On相对深度总值Changing(value);
					this.SendPropertyChanging();
					this._相对深度总值 = value;
					this.SendPropertyChanged("相对深度总值");
					this.On相对深度总值Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_触发压力", DbType="NVarChar(50)")]
		public string 触发压力
		{
			get
			{
				return this._触发压力;
			}
			set
			{
				if ((this._触发压力 != value))
				{
					this.On触发压力Changing(value);
					this.SendPropertyChanging();
					this._触发压力 = value;
					this.SendPropertyChanged("触发压力");
					this.On触发压力Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_焊接压力", DbType="NVarChar(50)")]
		public string 焊接压力
		{
			get
			{
				return this._焊接压力;
			}
			set
			{
				if ((this._焊接压力 != value))
				{
					this.On焊接压力Changing(value);
					this.SendPropertyChanging();
					this._焊接压力 = value;
					this.SendPropertyChanged("焊接压力");
					this.On焊接压力Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spare1", DbType="NVarChar(50)")]
		public string spare1
		{
			get
			{
				return this._spare1;
			}
			set
			{
				if ((this._spare1 != value))
				{
					this.Onspare1Changing(value);
					this.SendPropertyChanging();
					this._spare1 = value;
					this.SendPropertyChanged("spare1");
					this.Onspare1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spare2", DbType="NVarChar(50)")]
		public string spare2
		{
			get
			{
				return this._spare2;
			}
			set
			{
				if ((this._spare2 != value))
				{
					this.Onspare2Changing(value);
					this.SendPropertyChanging();
					this._spare2 = value;
					this.SendPropertyChanged("spare2");
					this.Onspare2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_速度", DbType="NVarChar(50)")]
		public string 速度
		{
			get
			{
				return this._速度;
			}
			set
			{
				if ((this._速度 != value))
				{
					this.On速度Changing(value);
					this.SendPropertyChanging();
					this._速度 = value;
					this.SendPropertyChanged("速度");
					this.On速度Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
